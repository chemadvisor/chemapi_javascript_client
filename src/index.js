/**
 * chemadvisor.io api
 * REST api to access ChemADVISOR maintained substance and regulatory data.
 *
 * OpenAPI spec version: 0.9.6 beta
 * Contact: support@chemadvisor.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'chemadvisor.chemApi.model/ApiResponseMessage', 'chemadvisor.chemApi.model/BaseDataType', 'chemadvisor.chemApi.model/Code', 'chemadvisor.chemApi.model/Entries', 'chemadvisor.chemApi.model/Entry', 'chemadvisor.chemApi.model/EntryChange', 'chemadvisor.chemApi.model/EntryChanges', 'chemadvisor.chemApi.model/EntryChemicalData', 'chemadvisor.chemApi.model/Fields', 'chemadvisor.chemApi.model/Identifier', 'chemadvisor.chemApi.model/Identifiers', 'chemadvisor.chemApi.model/Inventories', 'chemadvisor.chemApi.model/Inventory', 'chemadvisor.chemApi.model/Language', 'chemadvisor.chemApi.model/Languages', 'chemadvisor.chemApi.model/Link', 'chemadvisor.chemApi.model/Links', 'chemadvisor.chemApi.model/ModelNumber', 'chemadvisor.chemApi.model/Range', 'chemadvisor.chemApi.model/RegulatoryList', 'chemadvisor.chemApi.model/RegulatoryListChange', 'chemadvisor.chemApi.model/RegulatoryListChanges', 'chemadvisor.chemApi.model/RegulatoryLists', 'chemadvisor.chemApi.model/RelatedSubstance', 'chemadvisor.chemApi.model/RelatedSubstances', 'chemadvisor.chemApi.model/Release', 'chemadvisor.chemApi.model/Releases', 'chemadvisor.chemApi.model/Substance', 'chemadvisor.chemApi.model/SubstanceName', 'chemadvisor.chemApi.model/SubstanceNames', 'chemadvisor.chemApi.model/Substances', 'chemadvisor.chemApi.model/Tag', 'chemadvisor.chemApi.model/Tags', 'chemadvisor.chemApi.model/Text', 'chemadvisor.chemApi.client/ListsApi', 'chemadvisor.chemApi.client/ReleasesApi', 'chemadvisor.chemApi.client/SubstancesApi', 'chemadvisor.chemApi.client/TagsApi', 'chemadvisor.chemApi.client/UpdatesApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./chemadvisor.chemApi.model/ApiResponseMessage'), require('./chemadvisor.chemApi.model/BaseDataType'), require('./chemadvisor.chemApi.model/Code'), require('./chemadvisor.chemApi.model/Entries'), require('./chemadvisor.chemApi.model/Entry'), require('./chemadvisor.chemApi.model/EntryChange'), require('./chemadvisor.chemApi.model/EntryChanges'), require('./chemadvisor.chemApi.model/EntryChemicalData'), require('./chemadvisor.chemApi.model/Fields'), require('./chemadvisor.chemApi.model/Identifier'), require('./chemadvisor.chemApi.model/Identifiers'), require('./chemadvisor.chemApi.model/Inventories'), require('./chemadvisor.chemApi.model/Inventory'), require('./chemadvisor.chemApi.model/Language'), require('./chemadvisor.chemApi.model/Languages'), require('./chemadvisor.chemApi.model/Link'), require('./chemadvisor.chemApi.model/Links'), require('./chemadvisor.chemApi.model/ModelNumber'), require('./chemadvisor.chemApi.model/Range'), require('./chemadvisor.chemApi.model/RegulatoryList'), require('./chemadvisor.chemApi.model/RegulatoryListChange'), require('./chemadvisor.chemApi.model/RegulatoryListChanges'), require('./chemadvisor.chemApi.model/RegulatoryLists'), require('./chemadvisor.chemApi.model/RelatedSubstance'), require('./chemadvisor.chemApi.model/RelatedSubstances'), require('./chemadvisor.chemApi.model/Release'), require('./chemadvisor.chemApi.model/Releases'), require('./chemadvisor.chemApi.model/Substance'), require('./chemadvisor.chemApi.model/SubstanceName'), require('./chemadvisor.chemApi.model/SubstanceNames'), require('./chemadvisor.chemApi.model/Substances'), require('./chemadvisor.chemApi.model/Tag'), require('./chemadvisor.chemApi.model/Tags'), require('./chemadvisor.chemApi.model/Text'), require('./chemadvisor.chemApi.client/ListsApi'), require('./chemadvisor.chemApi.client/ReleasesApi'), require('./chemadvisor.chemApi.client/SubstancesApi'), require('./chemadvisor.chemApi.client/TagsApi'), require('./chemadvisor.chemApi.client/UpdatesApi'));
  }
}(function(ApiClient, ApiResponseMessage, BaseDataType, Code, Entries, Entry, EntryChange, EntryChanges, EntryChemicalData, Fields, Identifier, Identifiers, Inventories, Inventory, Language, Languages, Link, Links, ModelNumber, Range, RegulatoryList, RegulatoryListChange, RegulatoryListChanges, RegulatoryLists, RelatedSubstance, RelatedSubstances, Release, Releases, Substance, SubstanceName, SubstanceNames, Substances, Tag, Tags, Text, ListsApi, ReleasesApi, SubstancesApi, TagsApi, UpdatesApi) {
  'use strict';

  /**
   * REST_api_to_access_ChemADVISOR_maintained_substance_and_regulatory_data_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ChemadvisorChemApi = require('index'); // See note below*.
   * var xxxSvc = new ChemadvisorChemApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ChemadvisorChemApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ChemadvisorChemApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ChemadvisorChemApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.9.6 beta
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ApiResponseMessage model constructor.
     * @property {module:chemadvisor.chemApi.model/ApiResponseMessage}
     */
    ApiResponseMessage: ApiResponseMessage,
    /**
     * The BaseDataType model constructor.
     * @property {module:chemadvisor.chemApi.model/BaseDataType}
     */
    BaseDataType: BaseDataType,
    /**
     * The Code model constructor.
     * @property {module:chemadvisor.chemApi.model/Code}
     */
    Code: Code,
    /**
     * The Entries model constructor.
     * @property {module:chemadvisor.chemApi.model/Entries}
     */
    Entries: Entries,
    /**
     * The Entry model constructor.
     * @property {module:chemadvisor.chemApi.model/Entry}
     */
    Entry: Entry,
    /**
     * The EntryChange model constructor.
     * @property {module:chemadvisor.chemApi.model/EntryChange}
     */
    EntryChange: EntryChange,
    /**
     * The EntryChanges model constructor.
     * @property {module:chemadvisor.chemApi.model/EntryChanges}
     */
    EntryChanges: EntryChanges,
    /**
     * The EntryChemicalData model constructor.
     * @property {module:chemadvisor.chemApi.model/EntryChemicalData}
     */
    EntryChemicalData: EntryChemicalData,
    /**
     * The Fields model constructor.
     * @property {module:chemadvisor.chemApi.model/Fields}
     */
    Fields: Fields,
    /**
     * The Identifier model constructor.
     * @property {module:chemadvisor.chemApi.model/Identifier}
     */
    Identifier: Identifier,
    /**
     * The Identifiers model constructor.
     * @property {module:chemadvisor.chemApi.model/Identifiers}
     */
    Identifiers: Identifiers,
    /**
     * The Inventories model constructor.
     * @property {module:chemadvisor.chemApi.model/Inventories}
     */
    Inventories: Inventories,
    /**
     * The Inventory model constructor.
     * @property {module:chemadvisor.chemApi.model/Inventory}
     */
    Inventory: Inventory,
    /**
     * The Language model constructor.
     * @property {module:chemadvisor.chemApi.model/Language}
     */
    Language: Language,
    /**
     * The Languages model constructor.
     * @property {module:chemadvisor.chemApi.model/Languages}
     */
    Languages: Languages,
    /**
     * The Link model constructor.
     * @property {module:chemadvisor.chemApi.model/Link}
     */
    Link: Link,
    /**
     * The Links model constructor.
     * @property {module:chemadvisor.chemApi.model/Links}
     */
    Links: Links,
    /**
     * The ModelNumber model constructor.
     * @property {module:chemadvisor.chemApi.model/ModelNumber}
     */
    ModelNumber: ModelNumber,
    /**
     * The Range model constructor.
     * @property {module:chemadvisor.chemApi.model/Range}
     */
    Range: Range,
    /**
     * The RegulatoryList model constructor.
     * @property {module:chemadvisor.chemApi.model/RegulatoryList}
     */
    RegulatoryList: RegulatoryList,
    /**
     * The RegulatoryListChange model constructor.
     * @property {module:chemadvisor.chemApi.model/RegulatoryListChange}
     */
    RegulatoryListChange: RegulatoryListChange,
    /**
     * The RegulatoryListChanges model constructor.
     * @property {module:chemadvisor.chemApi.model/RegulatoryListChanges}
     */
    RegulatoryListChanges: RegulatoryListChanges,
    /**
     * The RegulatoryLists model constructor.
     * @property {module:chemadvisor.chemApi.model/RegulatoryLists}
     */
    RegulatoryLists: RegulatoryLists,
    /**
     * The RelatedSubstance model constructor.
     * @property {module:chemadvisor.chemApi.model/RelatedSubstance}
     */
    RelatedSubstance: RelatedSubstance,
    /**
     * The RelatedSubstances model constructor.
     * @property {module:chemadvisor.chemApi.model/RelatedSubstances}
     */
    RelatedSubstances: RelatedSubstances,
    /**
     * The Release model constructor.
     * @property {module:chemadvisor.chemApi.model/Release}
     */
    Release: Release,
    /**
     * The Releases model constructor.
     * @property {module:chemadvisor.chemApi.model/Releases}
     */
    Releases: Releases,
    /**
     * The Substance model constructor.
     * @property {module:chemadvisor.chemApi.model/Substance}
     */
    Substance: Substance,
    /**
     * The SubstanceName model constructor.
     * @property {module:chemadvisor.chemApi.model/SubstanceName}
     */
    SubstanceName: SubstanceName,
    /**
     * The SubstanceNames model constructor.
     * @property {module:chemadvisor.chemApi.model/SubstanceNames}
     */
    SubstanceNames: SubstanceNames,
    /**
     * The Substances model constructor.
     * @property {module:chemadvisor.chemApi.model/Substances}
     */
    Substances: Substances,
    /**
     * The Tag model constructor.
     * @property {module:chemadvisor.chemApi.model/Tag}
     */
    Tag: Tag,
    /**
     * The Tags model constructor.
     * @property {module:chemadvisor.chemApi.model/Tags}
     */
    Tags: Tags,
    /**
     * The Text model constructor.
     * @property {module:chemadvisor.chemApi.model/Text}
     */
    Text: Text,
    /**
     * The ListsApi service constructor.
     * @property {module:chemadvisor.chemApi.client/ListsApi}
     */
    ListsApi: ListsApi,
    /**
     * The ReleasesApi service constructor.
     * @property {module:chemadvisor.chemApi.client/ReleasesApi}
     */
    ReleasesApi: ReleasesApi,
    /**
     * The SubstancesApi service constructor.
     * @property {module:chemadvisor.chemApi.client/SubstancesApi}
     */
    SubstancesApi: SubstancesApi,
    /**
     * The TagsApi service constructor.
     * @property {module:chemadvisor.chemApi.client/TagsApi}
     */
    TagsApi: TagsApi,
    /**
     * The UpdatesApi service constructor.
     * @property {module:chemadvisor.chemApi.client/UpdatesApi}
     */
    UpdatesApi: UpdatesApi
  };

  return exports;
}));
